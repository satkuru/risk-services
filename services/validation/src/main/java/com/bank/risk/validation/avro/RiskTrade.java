/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.bank.risk.validation.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RiskTrade extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RiskTrade\",\"namespace\":\"com.bank.risk.validation.avro\",\"fields\":[{\"name\":\"product\",\"type\":\"string\"},{\"name\":\"eligible\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence product;
  @Deprecated public boolean eligible;

  /**
   * Default constructor.
   */
  public RiskTrade() {}

  /**
   * All-args constructor.
   */
  public RiskTrade(java.lang.CharSequence product, java.lang.Boolean eligible) {
    this.product = product;
    this.eligible = eligible;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return product;
    case 1: return eligible;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: product = (java.lang.CharSequence)value$; break;
    case 1: eligible = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'product' field.
   */
  public java.lang.CharSequence getProduct() {
    return product;
  }

  /**
   * Sets the value of the 'product' field.
   * @param value the value to set.
   */
  public void setProduct(java.lang.CharSequence value) {
    this.product = value;
  }

  /**
   * Gets the value of the 'eligible' field.
   */
  public java.lang.Boolean getEligible() {
    return eligible;
  }

  /**
   * Sets the value of the 'eligible' field.
   * @param value the value to set.
   */
  public void setEligible(java.lang.Boolean value) {
    this.eligible = value;
  }

  /** Creates a new RiskTrade RecordBuilder */
  public static com.bank.risk.validation.avro.RiskTrade.Builder newBuilder() {
    return new com.bank.risk.validation.avro.RiskTrade.Builder();
  }
  
  /** Creates a new RiskTrade RecordBuilder by copying an existing Builder */
  public static com.bank.risk.validation.avro.RiskTrade.Builder newBuilder(com.bank.risk.validation.avro.RiskTrade.Builder other) {
    return new com.bank.risk.validation.avro.RiskTrade.Builder(other);
  }
  
  /** Creates a new RiskTrade RecordBuilder by copying an existing RiskTrade instance */
  public static com.bank.risk.validation.avro.RiskTrade.Builder newBuilder(com.bank.risk.validation.avro.RiskTrade other) {
    return new com.bank.risk.validation.avro.RiskTrade.Builder(other);
  }
  
  /**
   * RecordBuilder for RiskTrade instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RiskTrade>
    implements org.apache.avro.data.RecordBuilder<RiskTrade> {

    private java.lang.CharSequence product;
    private boolean eligible;

    /** Creates a new Builder */
    private Builder() {
      super(com.bank.risk.validation.avro.RiskTrade.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.bank.risk.validation.avro.RiskTrade.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing RiskTrade instance */
    private Builder(com.bank.risk.validation.avro.RiskTrade other) {
            super(com.bank.risk.validation.avro.RiskTrade.SCHEMA$);
      if (isValidValue(fields()[0], other.product)) {
        this.product = data().deepCopy(fields()[0].schema(), other.product);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eligible)) {
        this.eligible = data().deepCopy(fields()[1].schema(), other.eligible);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'product' field */
    public java.lang.CharSequence getProduct() {
      return product;
    }
    
    /** Sets the value of the 'product' field */
    public com.bank.risk.validation.avro.RiskTrade.Builder setProduct(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.product = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'product' field has been set */
    public boolean hasProduct() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'product' field */
    public com.bank.risk.validation.avro.RiskTrade.Builder clearProduct() {
      product = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'eligible' field */
    public java.lang.Boolean getEligible() {
      return eligible;
    }
    
    /** Sets the value of the 'eligible' field */
    public com.bank.risk.validation.avro.RiskTrade.Builder setEligible(boolean value) {
      validate(fields()[1], value);
      this.eligible = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'eligible' field has been set */
    public boolean hasEligible() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'eligible' field */
    public com.bank.risk.validation.avro.RiskTrade.Builder clearEligible() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public RiskTrade build() {
      try {
        RiskTrade record = new RiskTrade();
        record.product = fieldSetFlags()[0] ? this.product : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.eligible = fieldSetFlags()[1] ? this.eligible : (java.lang.Boolean) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
